<?php

namespace {{ handlersVirtualNamespace }};

use {{ resource }};
use {{ realResource }} as {{ handlerName }}Real;

use OpenApi\Attributes as OAT;
use Rupadana\ApiService\ApiService;

$panel = filament()->getCurrentPanel();

$panelId = $panel->getId();
$panelPath = $panel->getPath();
$hasTenancy = $panel->hasTenancy();
$tenantSlugAttribute = $panel->getTenantSlugAttribute();
$panelPrefix = app(ApiService::class)->isRoutePrefixedByPanel() ? $panelPath ?? $panelId : '';

if (
    ApiService::isTenancyEnabled() &&
    ApiService::tenancyAwareness() &&
    app({{ resourceClass }}::class)->isScopedToTenant()
) {
    defined("TENANT_AWARENESS_{{ capitalsResource }}") ?: define("TENANT_AWARENESS_{{ capitalsResource }}", true);
} else {
    defined("TENANT_AWARENESS_{{ capitalsResource }}") ?: define("TENANT_AWARENESS_{{ capitalsResource }}", false);
}

if ({{ handlerName }}Real::isPublic()) {
    defined("RESOURCE_PUBLIC_{{ capitalsResource }}_DETAIL") ?: define("RESOURCE_PUBLIC_{{ capitalsResource }}_DETAIL", true);
} else {
    defined("RESOURCE_PUBLIC_{{ capitalsResource }}_DETAIL") ?: define("RESOURCE_PUBLIC_{{ capitalsResource }}_DETAIL", false);
}

defined("PANEL_PREFIX_{{ capitalsResource }}_DETAIL") ?: define("PANEL_PREFIX_{{ capitalsResource }}_DETAIL", $panelPrefix);
defined("BASE_URL") ?: define("BASE_URL", config('app.url'));

#[OAT\Get(
    path: "{{ path }}/{id}",
    operationId: "get{{ modelClass }}Detail",
    tags: ["{{ pluralClass }}"],
    summary: "Get detail of {{ modelClass }}",
    description: "Returns detail of {{ modelClass }}",
    servers: [
        (TENANT_AWARENESS_{{ capitalsResource }}) ?
            new OAT\Server(
                description: "API Server Filament Panel",
                url: BASE_URL . "/api/{panel}" . PANEL_PREFIX_{{ capitalsResource }}_DETAIL . "/{tenant}",
                variables: [
                    new OAT\ServerVariable(
                        serverVariable: "panel",
                        description: "Select the Filament Panel",
                        enum: PANEL_ENUMS,
                        default: PANEL_ENUMS[0]
                    ),
                    new OAT\ServerVariable(
                        serverVariable: "tenant",
                        description: 'ID of the tenant',
                        default: ""
                    ),

                ]
            ) :
            new OAT\Server(
                description: "API Server Filament Panel",
                url: BASE_URL . "/api/" . PANEL_PREFIX_{{ capitalsResource }}_DETAIL . "/",
            )
    ],
    security: (!RESOURCE_PUBLIC_{{ capitalsResource }}_DETAIL) ?  [["bearerAuth" => []]] : null,
    parameters: [
        // (TENANT_AWARENESS_{{ capitalsResource }}) ? new OAT\Parameter(ref: "#/components/parameters/tenant") : null,
        new OAT\Parameter(
            name: "id",
            description: "{{ modelClass }} ID",
            required: true,
            in: "path",
            schema: new OAT\Schema(type: "integer"),
            example: "", // OAT\Examples(example="int", value="0", summary="An int value."),
        ),
        new OAT\Parameter(
            name: "page[offset]",
            description: "Pagination offset option",
            required: false,
            in: "query",
            schema: new OAT\Schema(type: "integer"),
            example: "", // OAT\Examples(example="int", value="0", summary="An int value."),
        ),
        new OAT\Parameter(
            name: "page[limit]",
            description: "Pagination limit option",
            required: false,
            in: "query",
            schema: new OAT\Schema(type: "integer"),
            example: "", // OAT\Examples(example="int", value="0", summary="An int value."),
        ),
        new OAT\Parameter(
            name: "sort",
            description: "Sorting",
            required: false,
            in: "query",
            schema: new OAT\Schema(type: "string"),
            example: "", // @OAT\Examples(example="string", value="-created,name", summary="A comma separated value"),
        ),
        new OAT\Parameter(
            name: "include",
            description: "Include Relationships",
            required: false,
            in: "query",
            schema: new OAT\Schema(type: "string"),
            example: "", // @OAT\Examples(example="string", value="order,user", summary="A comma separated value of relationships"),
        ),
    ],
    responses: [
        new OAT\Response(response: 200, description: 'Operation succesful', content: new OAT\JsonContent(type: "object", ref: "#/components/schemas/{{ modelClass }}Transformer/properties/data/items")),
        new OAT\Response(response: 400, description: 'Bad Request'),
        new OAT\Response(response: 401, description: 'Unauthenticated'),
        new OAT\Response(response: 403, description: 'Forbidden'),
        new OAT\Response(response: 404, description: 'Resource not Found'),
    ]
)]

class {{ handlerName }} extends {{ handlerName }}Real {}
